// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var fs, isGlob, isString, Path, removePaths;
  fs = require('fs');
  Path = require('path');
  exports.glob = require('glob');
  exports.getGlobPattern = function (basePath, options) {
    var cache$, extension, fuzz, path, recursive;
    if (isGlob(basePath))
      return basePath;
    cache$ = options;
    extension = cache$.extension;
    recursive = cache$.recursive;
    fuzz = recursive !== false ? '**/*' : '*';
    path = '' + basePath + '/' + fuzz;
    if (null != extension)
      path += '.' + extension;
    return Path.normalize(path);
  };
  exports.isString = isString = function (obj) {
    return {}.toString.call(obj) === '[object String]';
  };
  exports.isFile = function (path, cb) {
    return fs.exists(path, function (pathExists) {
      if (!pathExists)
        return cb(false);
      return fs.stat(path, function (err, stats) {
        if (null != err) {
          throw err;
        } else {
          return cb(stats.isFile());
        }
      });
    });
  };
  exports.isFileSync = function (path) {
    return fs.existsSync(path) && fs.statSync(path).isFile();
  };
  exports.rejectPaths = function (paths, excludedPaths) {
    var iterator;
    if (isString(excludedPaths))
      return removePaths(paths, excludedPaths);
    iterator = function (accum, pathToExclude) {
      return removePaths(null != accum ? accum : paths, pathToExclude);
    };
    return excludedPaths.reduce(iterator, null);
  };
  removePaths = function (paths, pathToExclude) {
    var iterator;
    pathToExclude = Path.resolve(pathToExclude);
    pathToExclude = new RegExp('^' + pathToExclude.replace(/\//g, '/') + '.*');
    iterator = function (accum, path) {
      if (null != Path.resolve(path).match(pathToExclude)) {
        return accum;
      } else {
        return accum.concat(path);
      }
    };
    return paths.reduce(iterator, []);
  };
  isGlob = function (str) {
    return str.indexOf('*') !== -1;
  };
}.call(this);
